/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.PharmacyEnterprise;
import Business.Medication.Drug;
import Business.Medication.DrugDirectory;
import Business.Medication.Prescription;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.VisitRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jashwanth
 */
public class DoctorPrescriptionJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Network network;
    private EcoSystem system;
    private DrugDirectory drugs;
    private VisitRequest vr;
    private ArrayList<Drug> dlist;
    /**
     * Creates new form DoctorPrescriptionJPanel
     */
    public DoctorPrescriptionJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Network network, EcoSystem system, VisitRequest vr) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.network = network;
        this.system = system;
        this.vr = vr;
        clear();
        populatePrescription();
        populateComboBox();
    }
    
    public void clear() {
        DefaultTableModel model = (DefaultTableModel) tblDrugs.getModel();
        model.setRowCount(0);
    }
    
    public void populatePrescription() {
        DefaultTableModel model = (DefaultTableModel) tblPrescription.getModel();
        model.setRowCount(0);
        ArrayList<Drug> prevpres = vr.getPrescription().getList();
        for (Drug d : prevpres) {
            Object[] row = new Object[3];
            row[0] = d.getDrugName();
            row[1] = d.getCost();
            row[2] = d.getQuantity();
            model.addRow(row);
        }
    }
    
    public void populateDrugTable() {
        DefaultTableModel model = (DefaultTableModel) tblDrugs.getModel();
        model.setRowCount(0);
        String salesperson = jcbPharmacy.getSelectedItem().toString();
        drugs = new DrugDirectory();
        ArrayList<Enterprise> enterprises = network.getEnterpriseList(Enterprise.EnterpriseType.Pharmacy);
        for (Enterprise ent: enterprises) {
            if (ent.getName().equals(salesperson)) {
                PharmacyEnterprise phar = (PharmacyEnterprise)ent;
                drugs = phar.getAllDrugs();
            }
        }
        for (Drug drug : drugs.getDrugDirectory()) {
            Object[] row = new Object[3];
            row[0] = drug.getDrugName();
            row[1] = drug.getCost();
            row[2] = drug.getQuantity();
            model.addRow(row);
        }
        
    }
    
    private void populateComboBox() {
        
        jcbPharmacy.removeAllItems();
        ArrayList<Enterprise> phar = network.getEnterpriseList(Enterprise.EnterpriseType.Pharmacy);
        for(Enterprise e : phar){
            jcbPharmacy.addItem(e.getName());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPharmacy = new javax.swing.JLabel();
        jcbPharmacy = new javax.swing.JComboBox();
        btnAssginPharmacy = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDrugs = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPrescription = new javax.swing.JTable();
        btnPrescribe = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(241, 235, 218));
        setLayout(null);

        lblPharmacy.setText("Pharmacy :");
        add(lblPharmacy);
        lblPharmacy.setBounds(96, 35, 68, 16);

        jcbPharmacy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(jcbPharmacy);
        jcbPharmacy.setBounds(236, 31, 130, 27);

        btnAssginPharmacy.setBackground(new java.awt.Color(0, 153, 255));
        btnAssginPharmacy.setText("Select");
        btnAssginPharmacy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssginPharmacyActionPerformed(evt);
            }
        });
        add(btnAssginPharmacy);
        btnAssginPharmacy.setBounds(502, 30, 81, 29);

        tblDrugs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Drug", "Cost", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDrugs);

        add(jScrollPane1);
        jScrollPane1.setBounds(6, 71, 577, 97);

        btnAdd.setBackground(new java.awt.Color(0, 153, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd);
        btnAdd.setBounds(508, 180, 75, 29);

        tblPrescription.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Drug", "Cost", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPrescription);

        add(jScrollPane2);
        jScrollPane2.setBounds(6, 243, 588, 97);

        btnPrescribe.setBackground(new java.awt.Color(0, 153, 255));
        btnPrescribe.setText("Prescribe");
        btnPrescribe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrescribeActionPerformed(evt);
            }
        });
        add(btnPrescribe);
        btnPrescribe.setBounds(493, 381, 101, 29);

        btnBack.setBackground(new java.awt.Color(153, 153, 0));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(63, 381, 97, 29);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/tabs1.jpg"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 1800, 900);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssginPharmacyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssginPharmacyActionPerformed
        populateDrugTable();
    }//GEN-LAST:event_btnAssginPharmacyActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblPrescription.getModel();
        int selectedRowIndex = tblDrugs.getSelectedRow();
        if (selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Drugs not selected");
            return;
        }
        Object[] row = new Object[3];
        row[0] = drugs.getDrugDirectory().get(selectedRowIndex).getDrugName();
        row[1] = drugs.getDrugDirectory().get(selectedRowIndex).getCost();
        row[2] = drugs.getDrugDirectory().get(selectedRowIndex).getQuantity();
        model.addRow(row);
        if (dlist==null) {
            dlist = new ArrayList<>();
        }
        dlist.add(drugs.getDrugDirectory().get(selectedRowIndex));
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnPrescribeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrescribeActionPerformed
        Prescription pres = new Prescription();
        for (Drug d : dlist) {
            pres.getList().add(d);
        }
        if (vr.getStatus().equals("Test results available") || vr.getStatus().equals("Medicines prescribed")) {
            vr.setPrescription(pres);
            vr.setSalesPersonName(jcbPharmacy.getSelectedItem().toString());
            vr.setStatus("Medicines prescribed");
            JOptionPane.showMessageDialog(this, "Medicines prescibed");
        } else {
            JOptionPane.showMessageDialog(this, "Invalid request");
        }
    }//GEN-LAST:event_btnPrescribeActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAssginPharmacy;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnPrescribe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox jcbPharmacy;
    private javax.swing.JLabel lblPharmacy;
    private javax.swing.JTable tblDrugs;
    private javax.swing.JTable tblPrescription;
    // End of variables declaration//GEN-END:variables
}
