/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.UserRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Enterprise.EnterpriseType;
import Business.Medication.Drug;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.RefillRequest;
import Business.WorkQueue.VisitRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jessi
 */
public class UserRefillRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Network network;
    private EcoSystem system;
    private ArrayList<Enterprise> pharmacies = new ArrayList<>();
    private ArrayList<VisitRequest> reqlist = new ArrayList<>();
    private VisitRequest vr;
    private RefillRequest rr;
    private ArrayList<RefillRequest> rq = new ArrayList<>();
    private RefillRequest crr;
    
    /**
     * Creates new form UserVisitDoctorJPanel
     */
    public UserRefillRequestJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Network network, EcoSystem system) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.network = network;
        this.system = system;
        populateComboBox();
        populateTable();
        populateRefillTable();
        btnSave.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHospital = new javax.swing.JLabel();
        jcbInsurance = new javax.swing.JComboBox();
        CommentJLabel = new javax.swing.JLabel();
        CommentTxt = new javax.swing.JTextField();
        btnBookVisit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable1 = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnPrescription = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPrescription = new javax.swing.JTable();
        lblImage = new javax.swing.JLabel();

        setBackground(new java.awt.Color(241, 235, 218));
        setLayout(null);

        lblHospital.setText("Pharmacy :");
        add(lblHospital);
        lblHospital.setBounds(500, 70, 68, 16);

        jcbInsurance.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbInsuranceActionPerformed(evt);
            }
        });
        add(jcbInsurance);
        jcbInsurance.setBounds(650, 70, 150, 27);

        CommentJLabel.setText("Comment :");
        add(CommentJLabel);
        CommentJLabel.setBounds(500, 110, 69, 16);

        CommentTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommentTxtActionPerformed(evt);
            }
        });
        add(CommentTxt);
        CommentTxt.setBounds(650, 110, 170, 26);

        btnBookVisit.setBackground(new java.awt.Color(0, 153, 255));
        btnBookVisit.setText("Order Refilll");
        btnBookVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookVisitActionPerformed(evt);
            }
        });
        add(btnBookVisit);
        btnBookVisit.setBounds(710, 190, 115, 29);

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "RequestId", "Status", "Comment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(56, 60, 410, 100);

        workRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "RequestId", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable1);

        add(jScrollPane2);
        jScrollPane2.setBounds(490, 240, 371, 100);

        btnBack.setBackground(new java.awt.Color(153, 153, 0));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(100, 20, 97, 29);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView);
        btnView.setBounds(540, 150, 97, 29);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave);
        btnSave.setBounds(710, 150, 100, 29);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete);
        btnDelete.setBounds(540, 190, 100, 29);

        btnPrescription.setText("View Prescription");
        btnPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrescriptionActionPerformed(evt);
            }
        });
        add(btnPrescription);
        btnPrescription.setBounds(290, 190, 150, 29);

        tblPrescription.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Drug", "Cost", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblPrescription);
        if (tblPrescription.getColumnModel().getColumnCount() > 0) {
            tblPrescription.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane3);
        jScrollPane3.setBounds(56, 243, 410, 97);

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/tabs2.jpg"))); // NOI18N
        add(lblImage);
        lblImage.setBounds(0, 0, 1900, 900);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBookVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookVisitActionPerformed
        int rowindex = workRequestJTable.getSelectedRow();
        if (rowindex < 0) {
            JOptionPane.showMessageDialog(this, "Visit not selected");
            return;
        }
        VisitRequest vr = reqlist.get(rowindex);
        if (jcbInsurance.getSelectedItem() != null) {
            String pharmacy = jcbInsurance.getSelectedItem().toString();
        } else {
            JOptionPane.showMessageDialog(this, "Pharmacy not selected");
            return;
        }
        RefillRequest rr = new RefillRequest();
        rr.setUser(userAccount);
        rr.setUserComment(CommentTxt.getText());
        rr.setPrescription(vr.getPrescription());
        system.getRefillQueue().getRefillQueue().add(rr);
        rr.setUser(userAccount);
        rr.setStatus("Refill requested");
        crr = rr;
        for (Enterprise phs : pharmacies) {
            if (phs.getName().equals(jcbInsurance.getSelectedItem().toString())) {
                rr.setPharmacy(phs);
            }
        }
        populateTable();
        populateRefillTable();
    }//GEN-LAST:event_btnBookVisitActionPerformed

    private void CommentTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommentTxtActionPerformed
        
    }//GEN-LAST:event_CommentTxtActionPerformed

    private void jcbInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbInsuranceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbInsuranceActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrescriptionActionPerformed
        populatePrescriptionTable();
    }//GEN-LAST:event_btnPrescriptionActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = workRequestJTable1.getSelectedRow();
        rq = system.getRefillQueue().getRefillQueue();
        RefillRequest rr = rq.get(selectedRow);
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Refill not selected");
            return;
        }
        if (rr.getStatus().equals("Refill requested")) {
            rq.remove(selectedRow);
            JOptionPane.showMessageDialog(this, "Request removed");
        } else {
            JOptionPane.showMessageDialog(this, "Invalid request");
        }
        populateRefillTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        int selectedRow = workRequestJTable1.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Refill not selected");
            return;
        }
        rq = system.getRefillQueue().getRefillQueue();
        RefillRequest rr = rq.get(selectedRow);
        crr = rr;
        CommentTxt.setText(rr.getUserComment());
        btnSave.setEnabled(true);
        jcbInsurance.setEnabled(false);
        populatePrescriptionTable1();
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        btnSave.setEnabled(false);
        jcbInsurance.setEnabled(true);
        crr.setUserComment(CommentTxt.getText());
    }//GEN-LAST:event_btnSaveActionPerformed
    
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        ArrayList<VisitRequest> vq = system.getVisitQueue().getVisitQueue();
        for (VisitRequest req : vq) {
            Object[] row = new Object[3];
            row[0] = req.getRequestId();
            row[1] = req.getStatus();
            row[2] = req.getProblemComment();
            model.addRow(row);
        }
        reqlist = vq;
    }
    
    private void populateRefillTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable1.getModel();
        model.setRowCount(0);
        ArrayList<RefillRequest> rr = system.getRefillQueue().getRefillQueue();
        for (RefillRequest req : rr) {
            Object[] row = new Object[2];
            row[0] = req.getRequestId();
            row[1] = req.getStatus();
            model.addRow(row);
        }
    }

    private void populatePrescriptionTable() {
        DefaultTableModel model = (DefaultTableModel) tblPrescription.getModel();
        model.setRowCount(0);
        int selectedRow = workRequestJTable.getSelectedRow();
        VisitRequest vr = reqlist.get(selectedRow);
        if (vr.getPrescription() == null) {
            JOptionPane.showMessageDialog(this, "Prescription not present");
            return;
        }
        ArrayList<Drug> drugs = vr.getPrescription().getList();
        for (Drug d : drugs) {
            Object[] row = new Object[3];
            row[0] = d.getDrugName();
            row[1] = d.getQuantity();
            row[2] = d.getCost();
            model.addRow(row);
        }
    }
    
    private void populatePrescriptionTable1() {
        DefaultTableModel model = (DefaultTableModel) tblPrescription.getModel();
        model.setRowCount(0);
        int selectedRow = workRequestJTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Refill not selected");
            return;
        }
        ArrayList<RefillRequest> rq = system.getRefillQueue().getRefillQueue();
        rr = rq.get(selectedRow);
        if (rr.getPrescription() == null) {
            JOptionPane.showMessageDialog(this, "Prescription not present");
            return;
        }
        ArrayList<Drug> drugs = rr.getPrescription().getList();
        for (Drug d : drugs) {
            Object[] row = new Object[3];
            row[0] = d.getDrugName();
            row[1] = d.getQuantity();
            row[2] = d.getCost();
            model.addRow(row);
        }
    }

    private void populateComboBox() {
        
        jcbInsurance.removeAllItems();
        ArrayList<Enterprise> ins = network.getEnterpriseList(EnterpriseType.Pharmacy);
        for(Enterprise e : ins){
            jcbInsurance.addItem(e.getName());
            pharmacies.add(e);
        }
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CommentJLabel;
    private javax.swing.JTextField CommentTxt;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBookVisit;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPrescription;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox jcbInsurance;
    private javax.swing.JLabel lblHospital;
    private javax.swing.JLabel lblImage;
    private javax.swing.JTable tblPrescription;
    private javax.swing.JTable workRequestJTable;
    private javax.swing.JTable workRequestJTable1;
    // End of variables declaration//GEN-END:variables
}
